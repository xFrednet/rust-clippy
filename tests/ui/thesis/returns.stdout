=====
bb0:
    _0 = simple_const() -> [return: bb1, unwind: bb2]

bb1:
    return

bb2:
    resume

=====
location_map: {}
activation_map: {}
local_map: {}
locals_state_at_exit: AllAreInvalidated
AnalysisInfo {
    body: Body {
        basic_blocks: BasicBlocks {
            basic_blocks: [
                BasicBlockData {
                    statements: [],
                    terminator: Some(
                        Terminator {
                            source_info: SourceInfo {
                                span: tests/ui/thesis/returns.rs:7:5: 7:19 (#0),
                                scope: scope[0],
                            },
                            kind: _0 = simple_const() -> [return: bb1, unwind: bb2],
                        },
                    ),
                    is_cleanup: false,
                },
                BasicBlockData {
                    statements: [],
                    terminator: Some(
                        Terminator {
                            source_info: SourceInfo {
                                span: tests/ui/thesis/returns.rs:8:2: 8:2 (#0),
                                scope: scope[0],
                            },
                            kind: return,
                        },
                    ),
                    is_cleanup: false,
                },
                BasicBlockData {
                    statements: [],
                    terminator: Some(
                        Terminator {
                            source_info: SourceInfo {
                                span: tests/ui/thesis/returns.rs:6:1: 8:2 (#0),
                                scope: scope[0],
                            },
                            kind: resume,
                        },
                    ),
                    is_cleanup: true,
                },
            ],
            cache: Cache {
                predecessors: OnceLock(
                    [
                        [],
                        [
                            bb0,
                        ],
                        [
                            bb0,
                        ],
                    ],
                ),
                switch_sources: OnceLock(
                    <uninit>,
                ),
                is_cyclic: OnceLock(
                    false,
                ),
                reverse_postorder: OnceLock(
                    [
                        bb0,
                        bb1,
                        bb2,
                    ],
                ),
                dominators: OnceLock(
                    <uninit>,
                ),
            },
        },
        phase: Analysis(
            Initial,
        ),
        pass_count: 1,
        source: MirSource {
            instance: Item(
                DefId(0:4 ~ returns[b73b]::fn_call),
            ),
            promoted: None,
        },
        source_scopes: [
            SourceScopeData {
                span: tests/ui/thesis/returns.rs:6:1: 8:2 (#0),
                parent_scope: None,
                inlined: None,
                inlined_parent_scope: None,
                local_data: Set(
                    SourceScopeLocalData {
                        lint_root: HirId(DefId(0:4 ~ returns[b73b]::fn_call).0),
                        safety: Safe,
                    },
                ),
            },
        ],
        coroutine: None,
        local_decls: [
            LocalDecl {
                mutability: Mut,
                local_info: Set(
                    Boring,
                ),
                ty: u32,
                user_ty: None,
                source_info: SourceInfo {
                    span: tests/ui/thesis/returns.rs:6:17: 6:20 (#0),
                    scope: scope[0],
                },
            },
        ],
        user_type_annotations: [],
        arg_count: 0,
        spread_arg: None,
        var_debug_info: [],
        span: tests/ui/thesis/returns.rs:6:1: 8:2 (#0),
        required_consts: [],
        is_polymorphic: false,
        injection_phase: None,
        tainted_by_errors: None,
        function_coverage_info: None,
    },
    def_id: DefId(0:4 ~ returns[b73b]::fn_call),
    local_kinds: [
        Return,
    ],
    cfg: {
        bb0: Linear(
            bb1,
        ),
        bb1: Return,
    },
    loops: [],
    terms: {
        bb0: {
            _0: [],
        },
    },
}
Type: LocalDecl {
    mutability: Mut,
    local_info: Set(
        Boring,
    ),
    ty: u32,
    user_ty: None,
    source_info: SourceInfo {
        span: tests/ui/thesis/returns.rs:6:17: 6:20 (#0),
        scope: scope[0],
    },
}
